name: 🚀 Comprehensive CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'
  JAVA_VERSION: '17'

jobs:
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      javascript: ${{ steps.changes.outputs.javascript }}
      typescript: ${{ steps.changes.outputs.typescript }}
      java: ${{ steps.changes.outputs.java }}
      go: ${{ steps.changes.outputs.go }}
      swift: ${{ steps.changes.outputs.swift }}
      kotlin: ${{ steps.changes.outputs.kotlin }}
      rust: ${{ steps.changes.outputs.rust }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          python:
            - '**/*.py'
            - '**/requirements*.txt'
            - '**/pyproject.toml'
            - '**/setup.py'
          javascript:
            - '**/*.js'
            - '**/package*.json'
            - '**/yarn.lock'
          typescript:
            - '**/*.ts'
            - '**/*.tsx'
            - '**/tsconfig*.json'
          java:
            - '**/*.java'
            - '**/pom.xml'
            - '**/build.gradle*'
          go:
            - '**/*.go'
            - '**/go.mod'
            - '**/go.sum'
          swift:
            - '**/*.swift'
            - '**/Package.swift'
            - '**/*.xcodeproj/**'
          kotlin:
            - '**/*.kt'
            - '**/*.kts'
          rust:
            - '**/*.rs'
            - '**/Cargo.toml'
            - '**/Cargo.lock'

  python-ci:
    name: 🐍 Python CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python == 'true'
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pytest pytest-cov bandit safety isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type checking with mypy
      run: mypy . || true
    
    - name: Security check with bandit
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json || true
    
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}

  javascript-ci:
    name: 📦 JavaScript/Node.js CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.javascript == 'true'
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Code formatting check (Prettier)
      run: npx prettier --check .
    
    - name: Lint with ESLint
      run: npx eslint . --ext .js,.jsx --format json --output-file eslint-report.json || true
    
    - name: Security audit
      run: npm audit --audit-level high --json > npm-audit.json || true
    
    - name: Run tests
      run: npm test -- --coverage --coverageReporters=text-lcov > coverage.lcov
    
    - name: Build project
      run: npm run build || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.lcov
        flags: javascript
        name: javascript-${{ matrix.node-version }}

  typescript-ci:
    name: 📘 TypeScript CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.typescript == 'true'
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: TypeScript compilation check
      run: npx tsc --noEmit
    
    - name: Code formatting check (Prettier)
      run: npx prettier --check .
    
    - name: Lint with ESLint
      run: npx eslint . --ext .ts,.tsx --format json --output-file eslint-report.json || true
    
    - name: Security audit
      run: npm audit --audit-level high --json > npm-audit.json || true
    
    - name: Run tests
      run: npm test -- --coverage --coverageReporters=text-lcov > coverage.lcov
    
    - name: Build project
      run: npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.lcov
        flags: typescript
        name: typescript-${{ matrix.node-version }}

  go-ci:
    name: 🐹 Go CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.go == 'true'
    strategy:
      matrix:
        go-version: ['1.20', '1.21']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          gofmt -s -l .
          exit 1
        fi
    
    - name: Vet
      run: go vet ./...
    
    - name: Static analysis with staticcheck
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...
    
    - name: Security scan with gosec
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt json -out gosec-report.json ./... || true
    
    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: go
        name: go-${{ matrix.go-version }}

  java-ci:
    name: ☕ Java CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.java == 'true'
    strategy:
      matrix:
        java-version: ['11', '17', '21']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run tests with Maven
      run: mvn clean test
    
    - name: Generate test coverage report
      run: mvn jacoco:report
    
    - name: Code quality check with SpotBugs
      run: mvn spotbugs:check || true
    
    - name: Security scan with OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check || true
    
    - name: Build with Maven
      run: mvn clean compile
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: java
        name: java-${{ matrix.java-version }}

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        generateSarif: "1"
    
    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: CodeClimate Coverage
      uses: paambaati/codeclimate-action@v5.0.0
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      with:
        coverageLocations: |
          ./coverage.xml:coverage.py
          ./coverage.lcov:lcov
          ./coverage.out:gocov

  dependency-review:
    name: 📋 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  build-matrix:
    name: 🏗️ Multi-OS Build Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux
          - os: windows-latest  
            artifact-name: windows
          - os: macos-latest
            artifact-name: macos
    steps:
    - uses: actions/checkout@v4
    
    - name: Build on ${{ matrix.os }}
      run: |
        echo "Building on ${{ matrix.os }}"
        # 실제 빌드 명령어들을 여기에 추가
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: build-${{ matrix.artifact-name }}
        path: |
          ./dist
          ./build
        retention-days: 7

  performance-test:
    name: ⚡ Performance Testing  
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  quality-gate:
    name: 🚦 Quality Gate
    runs-on: ubuntu-latest
    needs: [python-ci, javascript-ci, typescript-ci, go-ci, java-ci, security-scan, code-quality]
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        echo "Python CI: ${{ needs.python-ci.result }}"
        echo "JavaScript CI: ${{ needs.javascript-ci.result }}"
        echo "TypeScript CI: ${{ needs.typescript-ci.result }}"
        echo "Go CI: ${{ needs.go-ci.result }}"
        echo "Java CI: ${{ needs.java-ci.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "❌ Quality gate failed - Some checks failed"
          exit 1
        else
          echo "✅ Quality gate passed - All checks successful"
        fi
    
    - name: Post status to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🚦 Quality Gate')
          );
          
          const status = '${{ contains(needs.*.result, "failure") }}' === 'true' ? 
            '❌ **FAILED**' : '✅ **PASSED**';
          
          const body = `## 🚦 Quality Gate Status: ${status}
          
          ### 📊 Check Results:
          - 🐍 Python CI: ${{ needs.python-ci.result || 'skipped' }}
          - 📦 JavaScript CI: ${{ needs.javascript-ci.result || 'skipped' }}  
          - 📘 TypeScript CI: ${{ needs.typescript-ci.result || 'skipped' }}
          - 🐹 Go CI: ${{ needs.go-ci.result || 'skipped' }}
          - ☕ Java CI: ${{ needs.java-ci.result || 'skipped' }}
          - 🛡️ Security Scan: ${{ needs.security-scan.result }}
          - 📊 Code Quality: ${{ needs.code-quality.result }}
          
          ${status === '✅ **PASSED**' ? 
            '🎉 All quality checks passed! Ready to merge.' : 
            '⚠️ Some checks failed. Please review and fix the issues before merging.'
          }`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }